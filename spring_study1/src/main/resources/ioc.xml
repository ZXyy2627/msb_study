<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
<!--    1.为了解耦，使用ioc容器，配置并初始化bean-->
    <!--<bean id="person1" class="com.lucky.pojo.Person">
        <property name="id" value="1"/>
        <property name="name" value="zhangSan"/>
        <property name="age" value="23"/>
        <property name="gender" value="男"/>
    </bean>
    ================================================================================================================================================
    -->

    <!--2.使用constructor-arg标签配置bean,初始化对象 并且使用name   -->
    <!--<bean id="person2" class="com.lucky.pojo.Person">
        <constructor-arg name="id" value="2"/>
        <constructor-arg name="name" value="liSi"/>
        <constructor-arg name="age" value="22"/>
        <constructor-arg name="gender" value="男"/>
    </bean>
    =============================================================================================================================================
    -->

    <!--3.使用constructor-arg标签配置bean，并初始化，使用index属性-->
    <!--<bean id="person2" class="com.lucky.pojo.Person">
        <constructor-arg index="2" value="22"/>
        <constructor-arg index="0" value="2"/>
        <constructor-arg index="3" value="女"/>
        <constructor-arg index="1" value="liSi"/>
    </bean>
    =============================================================================================================================================
    -->

    <!--4.使用constructor-arg标签配置bean，并初始化，使用type-->
    <!--<bean id="person2" class="com.lucky.pojo.Person">
        <constructor-arg type="java.lang.String" index="1" value="李四"/>
        <constructor-arg type="java.lang.String" index="3" value="男"/>
        <constructor-arg type="java.lang.Integer" index="0" value="2"/>
        <constructor-arg type="java.lang.Integer" index="2" value="22"/>
    </bean>
    =============================================================================================================================================
    -->

    <!--5.使用p命名空间配置bean-->
    <!--<bean id="person3" class="com.lucky.pojo.Person" p:id="3" p:name="王五" p:age="33" p:gender="女"/>-->

    <!--6.为bean的复杂对象进行赋值-->
    <!--<bean id="person4" class="com.lucky.pojo.Person">
        <property name="id" value="4"/>
        <property name="name" value="李四"/>
        <property name="age" value="44"/>
        <property name="gender" value="男"/>
        &lt;!&ndash;注入数组类型的值&ndash;&gt;
        <property name="hobbies">
            <array>
                <value>table_tennis</value>
                <value>football</value>
                <value>girl</value>
            </array>
        </property>
        &lt;!&ndash;为bean注入其它对象&ndash;&gt;
        <property name="address" ref="address"/>
        <property name="lists">
            <list>
                <bean  class="com.lucky.pojo.Address">
                    <property name="province" value="湖南"/>
                    <property name="city" value="长沙"/>
                    <property name="town" value="bb"/>
                </bean>
                <bean class="com.lucky.pojo.Address">
                    <property name="province" value="广东"/>
                    <property name="city" value="广州"/>
                    <property name="town" value="白云"/>
                </bean>
            </list>
        </property>
        <property name="set">
            <set>
                &lt;!&ndash;如果有重复的，不会报错，spring会直接去掉&ndash;&gt;
                <value>555</value>
                <value>666</value>
                <value>555</value>
            </set>
        </property>
        <property name="map">
            <map>
                <entry key="aaa" value="111"/>
                <entry key="bbb" value-ref="address"/>
            </map>
        </property>
        <property name="props">
            <props>
                <prop key="jdbc.username">aaa</prop>
                <prop key="jdbc.password">bbb</prop>
            </props>
        </property>
    </bean>
    <bean id="address" class="com.lucky.pojo.Address">
        <property name="province" value="湖北"/>
        <property name="city" value="武汉"/>
        <property name="town" value="硚口"/>
    </bean>-->

    <!--继承关系的bean配置-->
    <!--<bean id="person5" class="com.lucky.pojo.Person">
        <property name="id" value="5"/>
        <property name="name" value="李四爹"/>
        <property name="age" value="55"/>
    </bean>
    <bean id="son" class="com.lucky.pojo.Person" parent="person5">
        <property name="gender" value="女"/>
        <property name="name" value="李花花"/>
    </bean>-->

    <!--8.创建bean的时候的依赖关系  使用depends-on-->
    <!--<bean id="person6" class="com.lucky.pojo.Person" depends-on="address">
        <property name="address" ref="address"/>
    </bean>
    <bean id="address" class="com.lucky.pojo.Address">
        <property name="province" value="湖北"/>
        <property name="city" value="武汉"/>
        <property name="town" value="硚口"/>
    </bean>-->

    <!--9.bean的作用域通过scope属性控制，在Spring4.x版本中有4个，singleton,prototype,request,session
    现在Spring5.x版本中只有2个，singleton,prototype-->

    <!--10.静态工厂创建对象
        使用静态工厂创建对象，不需要配置工厂bean，直接将class属性指定为工厂bean，工厂方法指定为创建对象的静态方法
        但是获取到的是Person对象 此处相当于调用StaticFactoryBean.getInstance()方法
    -->
    <!--<bean id="person8" class="com.lucky.factory.StaticFactoryBean" factory-method="getInstance"/>
    ===============================================================================================================
    -->

    <!--11.实例工厂创建对象 实例工厂需要先配置工厂bean-->
    <!--
    <bean id="instanceFactory" class="com.lucky.factory.InstanceFactory"/>
    <bean id="person9" class="com.lucky.pojo.Person" factory-bean="instanceFactory" factory-method="getInstance">
        <constructor-arg name="name" value="余9"/>
    </bean>
    <bean id="person99" class="com.lucky.pojo.Person" factory-bean="instanceFactory" factory-method="getInstance"/>
    ===================================================================================================================
    -->

    <!--12.为了解决单例立即加载对象的问题，可以通过实现FactoryBean接口的方式完成-->
    <!--<bean id="person11" class="com.lucky.factory.MyFactoryBean"/>-->


    <!--13.容器创建对象的初始化方法和销毁方法-->
    <!--<bean id="person12" class="com.lucky.pojo.Person" init-method="init" destroy-method="destroy">
        <property name="id" value="1111"/>
    </bean>
    =================================================================================================================================================
    -->

    <!--14.配置bean初始化前后调用增强方法-->
    <!--<bean class="com.lucky.pojo.PersonPostProcessor"/>
    <bean id="person13" class="com.lucky.pojo.Person" init-method="init">
        <property name="id" value="13131313"/>
    </bean>
    =================================================================================================================================================
    -->

    <!--15.配置第三方bean对象  以数据库连接池配置为例 首先以直接再xml配置文件写链接参数为例-->
    <!--<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="username" value="root"/>
        <property name="password" value="bbbb"/>
        <property name="url" value="jdbc:mysql://127.0.0.1:3306/mall?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false"/>
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    </bean>-->

    <!--需要先添加db.properties配置文件-->
    <context:property-placeholder location="classpath:db.properties"/>
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="url" value="${url}"/>
        <property name="driverClassName" value="${driverClassName}"/>
    </bean>

    <!--16.spring中的自动装配 通过autowire属性，有4种值
        default/no :不自动装配
        byName:根据id和setter方法自动装配
        byType:根据构造器参数类型进行自动装配,如果有多个不自动装配
        constructor:和byType类似
    -->
</beans>